 layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
     phase: TRAIN
  }
  transform_param {
    _MEAN_FILE_COMMENT_ mean_file: "/home/jose/Documents/code/caffe3/data/facescrub_mean.binaryproto" # not used in previous experiment
    mirror: false # not used in previous experiment
  }
  data_param {
    source: "_SOURCE_TRAIN_"
    batch_size: _BATCH_SIZE_TRAIN_
    backend: LMDB
  }
 }

 layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
     phase: TEST
  }
    transform_param {
    _MEAN_FILE_COMMENT_ mean_file: "/home/jose/Documents/code/caffe3/data/facescrub_mean.binaryproto"
    mirror: false # different from previous experiment
  }

  data_param {
    source: "_SOURCE_TEST_"
    batch_size: _BATCH_SIZE_TEST_
    backend: LMDB
  }
 }



layer {
  bottom: "data"
  top: "conv1_1"
  name: "conv1_1"
  type: "Convolution"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_1"
  top: "conv1_1"
  name: "relu1_1"
  type: "ReLU"
}
layer {
  bottom: "conv1_1"
  top: "conv1_2"
  name: "conv1_2"
  type: "Convolution"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_2"
  top: "conv1_2"
  name: "relu1_2"
  type: "ReLU"
}
layer {
  bottom: "conv1_2"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool1"
  top: "conv2_1"
  name: "conv2_1"
  type: "Convolution"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_1"
  top: "conv2_1"
  name: "relu2_1"
  type: "ReLU"
}
layer {
  bottom: "conv2_1"
  top: "conv2_2"
  name: "conv2_2"
  type: "Convolution"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_2"
  top: "conv2_2"
  name: "relu2_2"
  type: "ReLU"
}
layer {
  bottom: "conv2_2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool2"
  top: "conv3_1"
  name: "conv3_1"
  type: "Convolution"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_1"
  top: "conv3_1"
  name: "relu3_1"
  type: "ReLU"
}
layer {
  bottom: "conv3_1"
  top: "conv3_2"
  name: "conv3_2"
  type: "Convolution"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_2"
  top: "conv3_2"
  name: "relu3_2"
  type: "ReLU"
}
layer {
  bottom: "conv3_2"
  top: "conv3_3"
  name: "conv3_3"
  type: "Convolution"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_3"
  top: "conv3_3"
  name: "relu3_3"
  type: "ReLU"
}
layer {
  bottom: "conv3_3"
  top: "pool3"
  name: "pool3"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool3"
  top: "conv4_1"
  name: "conv4_1"
  type: "Convolution"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_1"
  top: "conv4_1"
  name: "relu4_1"
  type: "ReLU"
}
layer {
  bottom: "conv4_1"
  top: "conv4_2"
  name: "conv4_2"
  type: "Convolution"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_2"
  top: "conv4_2"
  name: "relu4_2"
  type: "ReLU"
}
layer {
  bottom: "conv4_2"
  top: "conv4_3"
  name: "conv4_3"
  type: "Convolution"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_3"
  top: "conv4_3"
  name: "relu4_3"
  type: "ReLU"
}
layer {
  bottom: "conv4_3"
  top: "pool4"
  name: "pool4"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool4"
  top: "conv5_1"
  name: "conv5_1"
  type: "Convolution"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_1"
  top: "conv5_1"
  name: "relu5_1"
  type: "ReLU"
}
layer {
  bottom: "conv5_1"
  top: "conv5_2"
  name: "conv5_2"
  type: "Convolution"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_2"
  top: "conv5_2"
  name: "relu5_2"
  type: "ReLU"
}
layer {
  name: "conv5_3"
  top: "conv5_3"
  bottom: "conv5_2"
  type: "Convolution"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_3"
  top: "conv5_3"
  name: "relu5_3"
  type: "ReLU"
}
layer {
  bottom: "conv5_3"
  top: "pool5"
  name: "pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "fc6"
  top: "fc6"
  bottom: "pool5"
  type: "InnerProduct"
  param {
    lr_mult: _LR_MULT_
  }
  param {
    lr_mult: _LR_MULT_
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  bottom: "fc6"
  top: "fc6"
  name: "relu6"
  type: "ReLU"
}
layer {
  name: "drop6"
  top: "fc6"
  bottom: "fc6"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "_FC7_NAME_"
  top: "_FC7_NAME_"
  bottom: "fc6"
  type: "InnerProduct"
  param {
    lr_mult: 1 
  }
  param {
    lr_mult: 1 
  }
  inner_product_param {
    weight_filler {
      type: "xavier"
      } 
    num_output: _FC7_LENGTH_ # 4096
  }
}
layer {
  name: "relu7"
  top: "_FC7_NAME_"
  bottom: "_FC7_NAME_"
  type: "ReLU"
}

layer {
  name: "drop7"
  top: "_FC7_NAME_"
  bottom: "_FC7_NAME_"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}



_FC9_COMMENT_ layer {
_FC9_COMMENT_   name: "fc9"
_FC9_COMMENT_   top:  "fc9"
_FC9_COMMENT_   bottom: "_FC7_NAME_"
_FC9_COMMENT_   type: "InnerProduct"
_FC9_COMMENT_   inner_product_param {
_FC9_COMMENT_     num_output: _FC9_LENGTH_
_FC9_COMMENT_     weight_filler {
_FC9_COMMENT_       type: "xavier"
_FC9_COMMENT_       } 
_FC9_COMMENT_    }
_FC9_COMMENT_ }

layer {
  name: "fc8_facescrub"
  top: "fc8_facescrub"
  bottom:  "_LAST_LAYER_NAME_"
  type: "InnerProduct"
  inner_product_param {
    num_output: _NUM_CLASSES_
    weight_filler {
      type: "xavier"
      } 
  }
}




layer {
  name: "softmax_loss"
  bottom: "fc8_facescrub"
  bottom: "label"
  top: "softmax_loss"
  type: "SoftmaxWithLoss"
  loss_weight: 1
}

layer {
  name: "accuracy"
  type: "Accuracy"
  bottom:  "fc8_facescrub"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}






# # apply the OLE loss to the vector of features that is multiplied by a final weights and then softmax
_OLE_COMMENT_ layer {
_OLE_COMMENT_   name: "OLE_loss"
_OLE_COMMENT_   type: "Python"
_OLE_COMMENT_   bottom: "_OLE_BOTTOM_"
_OLE_COMMENT_   bottom: "label"
_OLE_COMMENT_   top: "OLE"
_OLE_COMMENT_   python_param {
_OLE_COMMENT_     module: "OLE"
_OLE_COMMENT_     layer: "OLELossLayer"
_OLE_COMMENT_   param_str: '{"lambda_": _LAMBDA_}'
_OLE_COMMENT_   }
_OLE_COMMENT_   loss_weight: 1.0
_OLE_COMMENT_ }
